diff --git a/Makefile b/Makefile
index cac799d..94e7f9f 100644
--- a/Makefile
+++ b/Makefile
@@ -154,6 +154,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_find\
 
 
 ifeq ($(LAB),syscall)
diff --git a/clang-format.py b/clang-format.py
index f1bf537..68bb6e0 100644
--- a/clang-format.py
+++ b/clang-format.py
@@ -1,5 +1,6 @@
 import os
 
+
 c_extensions = (".c")
 
 for root, dirs, files in os.walk("kernel"):
@@ -10,4 +11,4 @@ for root, dirs, files in os.walk("kernel"):
 for root, dirs, files in os.walk("user"):
     for file in files:
         if file.endswith(c_extensions):
-            os.system("clang-format -i -style=file " + root + "/" + file)
\ No newline at end of file
+            os.system("clang-format -i -style=file " + root + "/" + file)
diff --git a/kernel/main.c b/kernel/main.c
index 8a3dc2e..44c3db3 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -9,6 +9,7 @@ volatile static int started = 0;
 // start() jumps here in supervisor mode on all CPUs.
 void main() {
   if (cpuid() == 0) {
+    printf("[210110315] enter main, init kernel\n");
     // consoleinit();
     // printfinit();
     printf("\n");
diff --git a/kernel/proc.c b/kernel/proc.c
index 1607145..9a3ef4f 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -183,6 +183,7 @@ uchar initcode[] = {0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02, 0x97, 0x05,
 
 // Set up first user process.
 void userinit(void) {
+  printf("[210110315] enter userinit\n");
   struct proc *p;
 
   p = allocproc();
@@ -197,6 +198,7 @@ void userinit(void) {
   p->trapframe->epc = 0;      // user program counter
   p->trapframe->sp = PGSIZE;  // user stack pointer
 
+  printf("[210110315] copy initcode to first user process\n");
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
 
diff --git a/kernel/start.c b/kernel/start.c
index f704fee..a17d73b 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -18,6 +18,7 @@ extern void timervec();
 
 // entry.S jumps here in machine mode on stack0.
 void start() {
+  
   // set M Previous Privilege mode to Supervisor, for mret.
   unsigned long x = r_mstatus();
   x &= ~MSTATUS_MPP_MASK;
@@ -40,11 +41,10 @@ void start() {
   // access to all of physical memory.
   w_pmpaddr0(0x1fffffffffffffull);
   w_pmpcfg0(0x1f);
-
   // ask for clock interrupts.
   timerinit();
 
-  // keep each CPU's hartid in its tp register, for cpuid().
+  // keep each CPU's h`artid in its tp register, for cpuid().
   int id = r_mhartid();
   w_tp(id);
 
@@ -52,8 +52,9 @@ void start() {
     // init uart and printf
     consoleinit();
     printfinit();
+    printf("[210110315] in start, init driver, interrupts and change mode\n");
   }
-
+  
   // switch to supervisor mode and jump to main().
   asm volatile("mret");
 }
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..b487c55
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,104 @@
+#include "kernel/types.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/stat.h"
+#include "user.h"
+
+/** 
+ * find()函数用于在指定目录下查找指定名称的文件或目录
+ * directory标识要进行查找操作的目录
+ * target标识要寻找的文件/目录名称
+ */
+void find(char* directory, char* target);
+
+/**
+ * fullDirectory()函数用于构建完整路径以实现在子目录中递归查找
+ * parentDirectory标识父目录
+ * target标识目标目录
+ * result为构建结果
+ */
+void fullDirectory(char* parentDirectory, char* target, char* result);
+
+void main(int argc, char* argv[]) {
+    int i = 0;
+    if(argc == 3) {         //检查shell输入的参数数量，正确则调用find()进行查找
+        find(argv[1], argv[2]);
+        exit(0);
+    }
+    else {                  //参数数量错误，报错并退出
+        printf("Invalid Count Of Argument\n");
+        exit(0);
+    }
+    
+    while (argv[1][i] != '\0')  
+        i++;                // 标记字符串的结束位置
+    i--;
+    if(argv[1][i] == '/') 
+        argv[1][i] = '\0';  // 去除目录路径最后的斜杠
+    find(argv[1], argv[2]);
+    exit(0);
+}
+
+void find(char* directory, char* target) {
+    int fileDescriptor, subFileDescriptor;
+    struct dirent directoryContent;
+    struct stat status;
+    fileDescriptor = open(directory, O_RDONLY);                             //通过系统调用open()打开指定目录
+    read(fileDescriptor, &directoryContent, sizeof(directoryContent));      //通过系统调用read()读取目录中的项目至结构体directoryContent中
+    while (directoryContent.inum > 0) {                                     //遍历目录内容项目
+        if((directoryContent.name[0] == '.' && directoryContent.name[1] == '\0') ||     //跳过当前目录"."和上级目录".."
+                 (directoryContent.name[0] == '.' &&  directoryContent.name[1] == '.' && directoryContent.name[2] == '\0')) {
+            if(read(fileDescriptor, &directoryContent, sizeof(directoryContent)) != sizeof(directoryContent)) {
+                break;                                                      //已遍历至当前目录末尾，终止遍历
+            }
+            continue;
+        }
+        char subDirectory[50];
+        fullDirectory(directory, directoryContent.name, subDirectory);      //构建完整的子目录，用于递归查找
+        subFileDescriptor = open(subDirectory, O_RDONLY);                   //打开子目录
+        if(fstat(subFileDescriptor, &status) < 0) {                         //获取子目录的元数据
+            printf("%s\n is not a valid path", directoryContent.name);
+            close(subFileDescriptor);
+            if(read(fileDescriptor, &directoryContent, sizeof(directoryContent)) != sizeof(directoryContent)) {
+                break;
+            }
+            continue;
+        }
+        close(subFileDescriptor);                                           //关闭子目录描述符
+
+        if(status.type == T_DIR) {                                          //判断子目录是否是一个目录
+            find(subDirectory, target);                                     //是目录，则在子目录中递归查找
+        }
+        else if(status.type == T_FILE) {                                    //是文件，则将其与要查找的目标文件名比较
+            int i = 0;
+            while (1) {
+                if(directoryContent.name[i] != target[i]) {
+                    break;
+                }
+                if(directoryContent.name[i] == '\0' && target[i] == '\0') {
+                    printf("%s/%s\n", directory, directoryContent.name);    //名称与要查找的文件相符，打印结果
+                    break;
+                }
+                i++;
+            }
+        }
+        if(read(fileDescriptor, &directoryContent, sizeof(directoryContent)) != sizeof(directoryContent)) {
+            break;                                                          //目录已遍历完毕，终止循环
+        }
+    }
+    return;
+}
+
+void fullDirectory(char* parentDirectory, char* target, char* result) {     
+    int parentSize = 0, targetSize = 0, i = 0;
+    while (parentDirectory[parentSize] != '\0')     //获取父目录名称长度
+        parentSize++;
+    while (target[targetSize] != '\0')              //获取子目录名称长度
+        targetSize++;
+    for (; i < parentSize; i++)                     //copy父目录名
+        result[i] = parentDirectory[i];
+    result[i++] = '/';                              //添加斜杠
+    for(; i < parentSize + 2 + targetSize; i++) 
+        result[i] = target[i - parentSize-1];       //copy子目录名
+    return;
+}
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..aa067ac
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,35 @@
+#include "kernel/types.h"
+#include "user.h"
+
+int main(int argc, char* argv[]) {
+    int forkReturn, childExitStatus, childId;
+    int p[2];               //管道标识符
+    char receivedInfo[5];   
+    pipe(p);                //系统调用pipe，创建管道
+    forkReturn = fork();    //系统调用fork，进程分支
+    if(forkReturn == 0) {   //子进程
+        read(p[0], receivedInfo, 5);    //子进程读取数据
+        close(p[0]);                    //关闭管道读取端，防止write阻塞
+        printf("%d: received %s\n",getpid(), receivedInfo);     //打印读取的数据
+        write(p[1], "pong", 5);         //子进程写入数据"pong"
+        close(p[1]);                    //关闭管道写入端
+        exit(0);                        //退出进程
+    }
+    else{   //父进程
+        write(p[1], "ping", 5);         //父进程写入数据
+        close(p[1]);                    //关闭管道写入端，防止read阻塞
+        sleep(1);
+        read(p[0], receivedInfo, 5);    //父进程读取数据
+        close(p[0]);                    //关闭管道读取端
+        printf("%d: received %s\n",getpid(), receivedInfo);     //打印读取的数据
+        childExitStatus = wait(&childId);   //等待子进程退出
+        childExitStatus = childExitStatus;
+        //printf("Child(id=%d) exit with status %d\n", child_exit_status, child_id);
+        exit(0);                        //退出进程
+    }
+}
+
+
+
+
+
diff --git a/user/sh.c b/user/sh.c
index 13c7d7c..09fdae7 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -135,6 +135,7 @@ int getcmd(char *buf, int nbuf) {
 int main(void) {
   static char buf[100];
   int fd;
+  printf("[210110315] start sh through execve\n");
 
   // Ensure that three file descriptors are open.
   while ((fd = open("console", O_RDWR)) >= 0) {
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..bbfc30a
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,12 @@
+#include "kernel/types.h"
+#include "user.h"
+int main(int argc, char* argv[]) {
+    if(argc != 2) {
+        printf("Sleep needs one argument!\n");
+        exit(-1);
+    }
+    int ticks = atoi(argv[1]);
+    sleep(ticks);
+    printf("(nothing happens for a little while)\n");
+    exit(0);
+}
\ No newline at end of file
